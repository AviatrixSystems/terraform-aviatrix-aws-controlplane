AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Aviatrix Platform HA - Provisions the necessary infrastructure to deploy the Aviatrix Platform (Controller, and CoPilot), and provide HA
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: General Details
        Parameters:
          - Region
          - DrRegion
          - S3BackupRegion
          - S3BackupBucketName
          - HaDistribution
          - NamePrefix
          - TerminationProtection
      - Label:
          default: Network Configuration
      - Label:
          default: New Network Details
        Parameters:
          - VpcName
          - DrVpcName
          - SubnetName
          - VpcCidr
          - DrVpcCidr
      - Label:
          default: Use Existing Network
        Parameters:
          - UseExistingVpc
          - ExistingVpcID
          - ExistingDrVpcID
          - ExistingSubnetIDs
          - ExistingDrSubnetIDs
      - Label:
          default: IAM roles
        Parameters:
          - CreateIamRoles
          - AppRoleName
          - Ec2RoleName
      - Label:
          default: Aviatrix Controller Instance Details
        Parameters:
          - Keypair
          - DrKeypair
          - ControllerInstanceName
          - ControllerInstanceType
          - ControllerRootVolumeType
          - ControllerRootVolumeSize
          - ControllerIncomingSslCidr
          - ControllerHaEnabled
      - Label:
          default: Aviatrix Controller Details
        Parameters:
          - LicenseType
          - AsgNotificationEmail
          - AdminEmail
          - AccessAccountName
          - ControllerVersion
          - CustomerId
          - CustomerIdSsmRegion
          - CustomerIdSsmPath
          - AdminPassword
          - AdminPasswordSsmRegion
          - AdminPasswordSsmPath
      - Label:
          default: Aviatrix Controller Existing EIP Details
        Parameters:
          - UseExistingEip
          - ExistingIp
          - ExistingDrIp
      - Label:
          default: Inter-region HA Details
        Parameters:
          - ZoneName
          - PrivateZone
          - RecordName
          - InterRegionBackupEnabled
      - Label:
          default: Aviatrix CoPilot Setup
      - Label:
          default: Aviatrix CoPilot Instance Details
        Parameters:
          - CoPilotName
          - CoPilotDeployment
          - CoPilotDataNodeCount
          - CoPilotInstanceTypeParam
          - CoPilotRootVolumeType
          - CoPilotRootVolumeSize
          - CoPilotDefaultDataVolumeType
          - CoPilotDefaultDataVolumeSize
          - CoPilotIncomingHttpsCidr
          - CoPilotIncomingNetflowCidr
          - CoPilotIncomingSyslogCidr
      - Label:
          default: Aviatrix CoPilot Details
        Parameters:
          - CoPilotType
          - CoPilotUsername
          - CoPilotEmail
          - CoPilotPassword
          - CoPilotHaEnabled
          - CoPilotPasswordSsmPath
          - CoPilotControllerAuthIpType
      - Label:
          default: Aviatrix CoPilot Existing EIP Details
        Parameters:
          - CoPilotUseExistingEip
          - CoPilotExistingIp
          - CoPilotExistingDrIp
    ParameterLabels:
      # general details
      Region:
        default: Primary Region
      DrRegion:
        default: DR Region
      S3BackupRegion:
        default: S3 Backup Region
      S3BackupBucketName:
        default: S3 Bucket for Controller Backups
      HaDistribution:
        default: HA Distribution Type
      NamePrefix:
        default: VM Name Prefix
      TerminationProtection:
        default: Enable Termination Protection for Controller and CoPilot?
      # new network details
      VpcName:
        default: New Primary VPC Name
      DrVpcName:
        default: New DR VPC Name
      SubnetName:
        default: New Subnet Name
      VpcCidr:
        default: New Primary VPC CIDR
      DrVpcCidr:
        default: New DR VPC CIDR
      # existing network details
      UseExistingVpc:
        default: Use Existing VPC?
      ExistingVpcID:
        default: Existing Primary VPC ID
      ExistingDrVpcID:
        default: Existing DR VPC ID
      ExistingSubnetIDs:
        default: Existing Subnet IDs
      ExistingDrSubnetIDs:
        default: Existing DR VPC Subnet IDs
      # iam roles
      CreateIamRoles:
        default: Create IAM Roles?
      AppRoleName:
        default: App Role Name
      Ec2RoleName:
        default: EC2 Role Name
      # controller instance details
      Keypair:
        default: Primary Instance SSH Key Name
      DrKeypair:
        default: DR Instance SSH Key Name
      ControllerInstanceName:
        default: Controller Instance Name
      ControllerInstanceType:
        default: Controller Instance EC2 Type
      ControllerRootVolumeType:
        default: Controller Root Volume Type
      ControllerRootVolumeSize:
        default: Controller Root Volume Size
      ControllerIncomingSslCidr:
        default: Incoming CIDR for HTTPS Access
      ControllerHaEnabled:
        default: Enable Controller HA?
      # controller details
      LicenseType:
        default: Controller License Type
      AsgNotificationEmail:
        default: ASG Notification Email
      AdminEmail:
        default: Access Account Administration Email
      AccessAccountName:
        default: CSP Access Account Name
      ControllerVersion:
        default: Controller Software Version
      CustomerId:
        default: (Optional) Controller Customer ID
      CustomerIdSsmRegion:
        default: SSM region for the Controller Customer ID
      CustomerIdSsmPath:
        default: SSM Path for the Controller Customer ID
      AdminPassword:
        default: (Optional) Admin Account Password
      AdminPasswordSsmRegion:
        default: SSM region for the Admin Account Password
      AdminPasswordSsmPath:
        default: SSM Path for the Admin Account Password
      # existing EIP details
      UseExistingEip:
        default: Use Existing EIP for the Controller
      ExistingIp:
        default: Existing EIP for Primary Controller Instance
      ExistingDrIp:
        default: Existing EIP for DR Controller Instance
      # inter-region HA details
      ZoneName:
        default: Exisitng Route53 Zone Name
      PrivateZone:
        default: Existing Route53 Zone is private
      RecordName:
        default: Record Name to Be Created Under Route53 Zone
      InterRegionBackupEnabled:
        default: Enable Controller Backup in Inter-Region HA
      # copilot instance details
      CoPilotName:
        default: CoPilot Instance Name
      CoPilotDeployment:
        default: CoPilot Deployment Type
      CoPilotDataNodeCount:
        default: Number of CoPilot Data Nodes in a Fault Tolerant deployment
      CoPilotInstanceTypeParam:
        default: CoPilot Instance EC2 Type
      CoPilotRootVoumelType:
        default: CoPilot Root Disk Volume Type
      CoPilotRootVolumeSize:
        default: CoPilot Root Disk Volume Size
      CoPilotDefaultDataVolumeType:
        default: CoPilot Default Data Disk Volume Type
      CoPilotDefaultDataVolumeSize:
        default: CoPilot Default Data Disk Volume Size
      CoPilotIncomingHttpsCidr:
        default: CoPilot Incoming HTTPS CIDR
      CoPilotIncomingNetflowCidr:
        default: CoPilot Incoming Netflow CIDR
      CoPilotIncomingSyslogCidr:
        default: CoPilot Incoming Syslog CIDR
      CoPilotType:
        default: CoPilot Billing Type
      CoPilotUsername:
        default: (Optional) CoPilot Service Account Username
      CoPilotEmail:
        default: (Optional) CoPilot Service Account Email
      CoPilotPassword:
        default: (Optional) CoPilot Service Account Password
      CoPilotHaEnabled:
        default: Enable CoPilot HA?
      CoPilotPasswordSsmPath:
        default: (Optional) SSM Path for the CoPilot Service Account Password
      CoPilotControllerAuthIpType:
        default: CoPilot - Controller Auth IP
      CoPilotUseExistingEip:
        default: Use Existing EIP for CoPilot
      CoPilotExistingIp:
        default: Existing EIP for Primary CoPilot
      CoPilotExistingDrIp:
        default: Existing EIP for DR CoPilot
Parameters:
  # general details
  Region:
    Type: String
    Description: Region for Primary Controller
    Default: us-east-1
  DrRegion:
    Type: String
    Description: Region for DR Controller
    Default: us-east-2
  S3BackupRegion:
    Type: String
    Description: Region for S3 Bucket for Controller Backups
    Default: us-east-1
  S3BackupBucketName:
    Type: String
    Description: Name of the S3 bucket to store controller backups
  HaDistribution:
    Type: String
    Description: Desired Controller high availability distribution
    Default: single-az
    AllowedValues:
      - single-az
      - inter-az
      - inter-region
  NamePrefix:
    Type: String
    Description: Additional name prefix for your environment resources
    Default: "avx"
  # new network details
  VpcName:
    Type: String
    Description: Name of the new primary VPC for the Aviatrix resources
    Default: "Aviatrix-VPC"
  DrVpcName:
    Type: String
    Description: Name of the new DR VPC for the Aviatrix resources
    Default: "Aviatrix-DR-VPC"
  SubnetName:
    Type: String
    Description: Name of the subnet in the new VPC for the Aviatrix resources
    Default: "Aviatrix-Public-Subnet"
  VpcCidr:
    Description: CIDR range for the new primary VPC
    Type: String
    Default: 10.0.0.0/24
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: ^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d{1,2}$
    ConstraintDescription: Please provide valid IPv4 CIDR for the primary VPC CIDR
  DrVpcCidr:
    Description: CIDR range for the new DR VPC
    Type: String
    Default: 10.0.0.0/24
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: ^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d{1,2}$
    ConstraintDescription: Please provide valid IPv4 CIDR for the DR VPC CIDR
  # existing network details
  UseExistingVpc:
    Type: String
    Description: Use an existing VPC for Aviatrix resources
    Default: "false"
    AllowedValues:
      - true
      - false
  ExistingVpcID:
    Type: String
    Description: ID of the existing primary VPC for the Aviatrix resources
    Default: ""
  ExistingDrVpcID:
    Type: String
    Description: ID of the new DR VPC for the Aviatrix resources
    Default: ""
  ExistingSubnetIDs:
    Type: String
    Description: Comma-separated list of subnets for Aviatrix resources in the existing primary VPC
    Default: ""
  ExistingDrSubnetIDs:
    Type: String
    Description: Comma-separated list of subnets for Aviatrix resources in the existing DR VPC
    Default: ""
  # iam roles
  CreateIamRoles:
    Type: String
    Description: Create new IAM roles 
    Default: "false"
    AllowedValues:
      - true
      - false
  AppRoleName:
    Type: String
    Description: IAM Role to allow role-based AWS account access
    Default: "aviatrix-role-app"
  Ec2RoleName:
    Type: String
    Description: IAM Role for the Controller EC2 instance
    Default: "aviatrix-role-ec2"
  # controller instance details
  Keypair:
    Type: String
    Description: Key pair used by the primary Controller
  DrKeypair:
    Type: String
    Description: Key pair used by the DR Controller
    Default: ""
  ControllerInstanceName:
    Type: String
    Description: Name of the Controller
    Default: ""
  ControllerInstanceType:
    Type: String
    Description: Select an instance size for the Controller. Default is t3.xlarge
    Default: t3.xlarge
    AllowedValues:
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.9xlarge
      - c5n.18xlarge
  ControllerRootVolumeType:
    Type: String
    Description: Controller Root Volume Type
    Default: "gp3"
    AllowedValues:
      - standard
      - gp2
      - gp3
      - io1
      - io2
      - sc1
      - st1
  ControllerRootVolumeSize:
    Type: Number
    Description: >-
      Controller Root volume size. The minimum data volume size is 64GB.
      Default: 64GB.
    Default: 64
    MinValue: 64
  ControllerIncomingSslCidr:
    Type: String
    Description: >-
      Enter an IPv4 CIDR(e.g. 1.2.3.4/32) that is allowed to access the Controller via HTTPS
    MinLength: 1
    AllowedPattern: ^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d{1,2}$
    ConstraintDescription: Please provide an non-empty and valid IPv4 CIDR for HTTPS ingress
  ControllerHaEnabled:
    Type: String
    Description: Enable Controller HA? Set to False to temporarily disable Controller HA functionality
    Default: "true"
    AllowedValues:
      - true
      - false
  TerminationProtection:
    Type: String
    Description: Enable Termination Protection for the Controller and CoPilot EC2 VMs
    Default: "true"
    AllowedValues:
      - true
      - false
  # controller details
  LicenseType:
    Type: String
    Description: Controller Billing Type
    Default: "BYOL"
    AllowedValues:
      - BYOL
      - MeteredPlatinum
      - Custom
  AsgNotificationEmail:
    Type: String
    Description: >-
      Email address to which the ASG event notifications should be sent
    AllowedPattern: '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    ConstraintDescription: Must be a valid email address.
  AdminEmail:
    Type: String
    Description: >-
      Email address to which the ASG event notifications should be sent
    AllowedPattern: '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    ConstraintDescription: Must be a valid email address.
  AccessAccountName:
    Type: String
    Description: Name of the CSP Access Account
  ControllerVersion:
    Type: String
    Description: >-
      Specify a release version or use latest for the system to automatically select the latest official released build.
    Default: 'latest'
    AllowedPattern: '^latest|(([6-9]|[1-9][0-9])\.[0-9])$'
    ConstraintDescription: Must be a valid release server version.
  CustomerId:
    Type: String
    Description: >-
      The Customer ID for the Controller may be provided here. Please note that this is NOT a secure method, and NOT intended for production deployments. For production deployments, please use the next 2 SSM fields for Customer ID. If the Customer ID is provided via this field, it will take precedence over the Customer ID specificed via SSM
    Default: ""
  CustomerIdSsmRegion:
    Type: String
    Description: Region for the SSM parameter for the Customer ID
    Default: us-east-1
  CustomerIdSsmPath:
    Type: String
    Description: SSM path to the Aviatrix Customer ID parameter
    Default: "/aviatrix/controller/customer_id"
  AdminPassword:
    Type: String
    Description: >-
      The password for the Admin account on the Controller may be provided here. Please note that this is NOT a secure method, and NOT intended for production deployments. For production deployments, please use the next 2 fields to indicate the SSM parameter for the admin password. If the password is provided via this field, it will take precedence over the password specificed via SSM
    Default: ""
  AdminPasswordSsmRegion:
    Type: String
    Description: Region for the SSM parameter for the Controller admin account password, and (if specified) the CoPilot service account password
    Default: us-east-1
  AdminPasswordSsmPath:
    Type: String
    Description: SSM path to the Controller admin account password parameter
    Default: "/aviatrix/controller/password"
  # controller existing EIP
  UseExistingEip:
    Type: String
    Description: Use an existing EIP for the Controller
    Default: "false"
    AllowedValues:
      - true
      - false
  ExistingIp:
    Type: String
    Description: Existing EIP for Primary Controller instance
    Default: ""
  ExistingDrIp:
    Type: String
    Description: Existing EIP for DR Controller instance
    Default: ""
  # inter-region HA details
  ZoneName:
    Type: String
    Description: The exisitng Route53 zone name
    Default: ""
  PrivateZone:
    Type: String
    Description: Existing Route53 zone is private
    Default: "false"
    AllowedValues:
      - true
      - false
  RecordName:
    Type: String
    Description: The record name to be created under exisitng Route53 zone
    Default: ""
  InterRegionBackupEnabled:
    Type: String
    Description: Enable backups on the controller in an inter-region deployment
    Default: "false"
    AllowedValues:
      - true
      - false
  # copilot instance details
  CoPilotName:
    Type: String
    Description: CoPilot Instance Name
    Default: ""
  CoPilotDeployment:
    Type: String
    Description: CoPilot Deployment Type
    Default: "simple"
    AllowedValues:
      - simple
      - fault-tolerant
  CoPilotDataNodeCount:
    Type: Number
    Description: >-
      Desired number of CoPilot data nodes in a Fault-Tolerant deployment
      Default: 3.
    Default: 3
    MinValue: 3
    MaxValue: 9
    ConstraintDescription: Number of CoPilot data nodes can be between 3 and 9.
  CoPilotInstanceTypeParam:
    Type: String
    Default: m5.2xlarge
    AllowedValues:
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.9xlarge
      - c5n.18xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
      - m5n.2xlarge
      - m5n.4xlarge
      - m5n.8xlarge
      - m5n.12xlarge
      - m5n.16xlarge
      - m5n.24xlarge
    Description: Select an instance size for the CoPilot. Default is m5.2xlarge
  CoPilotRootVolumeType:
    Type: String
    Description: CoPilot Root Volume Type
    Default: "gp3"
    AllowedValues:
      - standard
      - gp2
      - gp3
      - io1
      - io2
      - sc1
      - st1
  CoPilotRootVolumeSize:
    Type: Number
    Description: >-
      Root volume size for the CoPilot instance. The minimum data volume size is 25GB.
      Default: 25GB.
    Default: 25
    MinValue: 25
  CoPilotDefaultDataVolumeType:
    Type: String
    Description: CoPilot Default Data Volume Type
    Default: "gp3"
    AllowedValues:
      - standard
      - gp2
      - gp3
      - io1
      - io2
      - sc1
      - st1
  CoPilotDefaultDataVolumeSize:
    Type: Number
    Description: >-
      Data volume size for the CoPilot default data disk. The minimum data volume size is 100GB.
      Default: 100GB.
    Default: 100
    MinValue: 100
  CoPilotIncomingHttpsCidr:
    Type: String
    Description: >-
      Enter an IPv4 CIDR(e.g. 1.2.3.4/32) that is allowed to access the CoPilot via HTTPS
    MinLength: 1
    AllowedPattern: ^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d{1,2}$
    ConstraintDescription: Please provide an non-empty and valid IPv4 CIDR for HTTPS ingress
  CoPilotIncomingNetflowCidr:
    Type: String
    Default: '0.0.0.0/0'
    Description: >-
      Enter an IPv4 CIDR(e.g. 1.2.3.4/32) that is allowed to access the CoPilot via Netflow
    MinLength: 1
    AllowedPattern: ^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d{1,2}$
    ConstraintDescription: Please provide an non-empty and valid IPv4 CIDR for Netflow ingress
  CoPilotIncomingSyslogCidr:
    Type: String
    Default: '0.0.0.0/0'
    Description: >-
      Enter an IPv4 CIDR(e.g. 1.2.3.4/32) that is allowed to access the CoPilot via Syslog
    MinLength: 1
    AllowedPattern: ^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d{1,2}$
    ConstraintDescription: Please provide an non-empty and valid IPv4 CIDR for Syslog ingress
  # copilot details
  CoPilotType:
    Type: String
    Description: CoPilot Billing Type
    Default: "Copilot"
    AllowedValues:
      - Copilot
      - CopilotARM
  CoPilotUsername:
    Type: String
    Description: CoPilot Service Account Username, if desired.
    Default: ""
  CoPilotEmail:
    Type: String
    Description: CoPilot Service Account Email, if desired.
    Default: ""
  CoPilotPassword:
    Type: String
    Description: >-
      The password for a custom Service Account on the CoPilot may be provided here. Please note that this is NOT a secure method, and NOT intended for production deployments. If you want to provide a password for a Service Account for production deployments, please use the next field to indicate the SSM parameter for the password. If the password is provided via this field, it will take precedence over the password specificed via SSM. The region for the SSM parameter must be same as the controller Admin password SSM region specified above.
    Default: ""
  CoPilotHaEnabled:
    Type: String
    Description: Enable CoPilot HA? Set to False to temporarily disable CoPilot HA functionality
    Default: "true"
    AllowedValues:
      - true
      - false
  CoPilotPasswordSsmPath:
    Type: String
    Description: SSM Path for the CoPilot Service Account Password
    Default: "/aviatrix/copilot/password"
  CoPilotControllerAuthIpType:
    Type: String
    Description: CoPilot - Controller Authentication IP type
    Default: "public"
    AllowedValues:
      - private
      - public
  # copilot existing EIP details
  CoPilotUseExistingEip:
    Type: String
    Description: Use an existing EIP for CoPilot
    Default: "false"
    AllowedValues:
      - true
      - false
  CoPilotExistingIp:
    Type: String
    Description: Existing EIP for Primary CoPilot instance
    Default: ""
  CoPilotExistingDrIp:
    Type: String
    Description: Existing EIP for DR CoPilot instance
    Default: ""
Resources:
  HADistributionSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /aviatrix/platform_ha/ha_distribution
      Type: String
      Value: "HA Distribution Type - currently NA"
  ZoneNameSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /aviatrix/platform_ha/zone_name
      Type: String
      Value: "Route53 Zone Name - currently NA"
  RecordNameSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /aviatrix/platform_ha/record_name
      Type: String
      Value: "Route53 Record Name - currently NA"
  S3BackupRegionSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /aviatrix/platform_ha/s3_backup_region
      Type: String
      Value: "S3 Backup Region Name - currently NA"
  S3BackupBucketSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /aviatrix/platform_ha/s3_backup_bucket
      Type: String
      Value: "S3 Backup Bucket Name - currently NA"
  LogGroupSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /aviatrix/platform_ha/log_group_name
      Type: String
      Value: "Cloudwatch Log Group Name - currently NA"
  ControllerNameSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /aviatrix/platform_ha/controller_name
      Type: String
      Value: "Controller Name - currently NA"
  CopilotNameSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /aviatrix/platform_ha/copilot_name
      Type: String
      Value: "CoPilot Name - currently NA"
  RegionSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /aviatrix/platform_ha/region
      Type: String
      Value: "Primary Region - currently NA"
  DrRegionSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /aviatrix/platform_ha/dr_region
      Type: String
      Value: "DR Region - currently NA"
  ControllerPublicIpSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /aviatrix/platform_ha/controller_public_ip
      Type: String
      Value: "Controller Public IP - currently NA"
  DrControllerPublicIpSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /aviatrix/platform_ha/dr_controller_public_ip
      Type: String
      Value: "DR Controller Public IP - currently NA"
  CopilotPublicIpSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /aviatrix/platform_ha/copilot_public_ip
      Type: String
      Value: "CoPilot Public IP - currently NA"
  DrCopilotPublicIpSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /aviatrix/platform_ha/dr_copilot_public_ip
      Type: String
      Value: "DR CoPilot Public IP - currently NA"
  LbDnsNameSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /aviatrix/platform_ha/lb_dns_name
      Type: String
      Value: "Loadbalancer DNS name - currently NA"
  DrLbDnsNameSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /aviatrix/platform_ha/dr_lb_dns_name
      Type: String
      Value: "DR Loadbalancer DNS name - currently NA"
  S3StateAndSoftware:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-${AWS::AccountId}-avx-platform-ha-tfs'
  Adminrole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-${AWS::Region}-AvxPlatformHA-codebuild'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: "*"
                Effect: Allow
                Resource: "*"
          PolicyName: !Sub '${AWS::StackName}-${AWS::Region}-Avx-HA-Project'
  AviatrixPlatformInitResource:
    Type: 'Custom::AviatrixPlatformInitTriggerPoint'
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      ServiceToken: !GetAtt AviatrixPlatformInitTriggerPoint.Arn
      GithubSource: "github.com/aviatrix-automation/Aviatrix_AWS_HA"
      Region: !Ref Region
      DrRegion: !Ref DrRegion
      S3BackupRegion: !Ref S3BackupRegion
      HaDistribution: !Ref HaDistribution
      NamePrefix: !Ref NamePrefix
      VpcName: !Ref VpcName
      DrVpcName: !Ref DrVpcName
      SubnetName: !Ref SubnetName
      VpcCidr: !Ref VpcCidr
      DrVpcCidr: !Ref DrVpcCidr
      UseExistingVpc: !Ref UseExistingVpc
      ExistingVpcID: !Ref ExistingVpcID
      ExistingDrVpcID: !Ref ExistingDrVpcID
      ExistingSubnetIDs: !Ref ExistingSubnetIDs
      ExistingDrSubnetIDs: !Ref ExistingDrSubnetIDs
      CreateIamRoles: !Ref CreateIamRoles
      AppRoleName: !Ref AppRoleName
      Ec2RoleName: !Ref Ec2RoleName
      Keypair: !Ref Keypair
      DrKeypair: !Ref DrKeypair
      ControllerInstanceName: !Ref ControllerInstanceName
      ControllerInstanceType: !Ref ControllerInstanceType
      ControllerRootVolumeType: !Ref ControllerRootVolumeType
      ControllerRootVolumeSize: !Ref ControllerRootVolumeSize
      ControllerIncomingSslCidr: !Ref ControllerIncomingSslCidr
      ControllerHaEnabled: !Ref ControllerHaEnabled
      TerminationProtection: !Ref TerminationProtection
      LicenseType: !Ref LicenseType
      AsgNotificationEmail: !Ref AsgNotificationEmail
      S3BackupBucketName: !Ref S3BackupBucketName
      AdminEmail: !Ref AdminEmail
      AccessAccountName: !Ref AccessAccountName
      ControllerVersion: !Ref ControllerVersion
      CustomerId: !Ref CustomerId
      CustomerIdSsmPath: !Ref CustomerIdSsmPath
      CustomerIdSsmRegion: !Ref CustomerIdSsmRegion
      AdminPassword: !Ref AdminPassword
      AdminPasswordSsmPath: !Ref AdminPasswordSsmPath
      AdminPasswordSsmRegion: !Ref AdminPasswordSsmRegion
      UseExistingEip: !Ref UseExistingEip
      ExistingIp: !Ref ExistingIp
      ExistingDrIp: !Ref ExistingDrIp
      ZoneName: !Ref ZoneName
      PrivateZone: !Ref PrivateZone
      RecordName: !Ref RecordName
      InterRegionBackupEnabled: !Ref InterRegionBackupEnabled
      CoPilotName: !Ref CoPilotName
      CoPilotDeployment: !Ref CoPilotDeployment
      CoPilotDataNodeCount: !Ref CoPilotDataNodeCount
      CoPilotInstanceTypeParam: !Ref CoPilotInstanceTypeParam
      CoPilotRootVolumeType: !Ref CoPilotRootVolumeType
      CoPilotRootVolumeSize: !Ref CoPilotRootVolumeSize
      CoPilotDefaultDataVolumeType: !Ref CoPilotDefaultDataVolumeType
      CoPilotDefaultDataVolumeSize: !Ref CoPilotDefaultDataVolumeSize
      CoPilotIncomingHttpsCidr: !Ref CoPilotIncomingHttpsCidr
      CoPilotIncomingNetflowCidr: !Ref CoPilotIncomingNetflowCidr
      CoPilotIncomingSyslogCidr: !Ref CoPilotIncomingSyslogCidr
      CoPilotType: !Ref CoPilotType
      CoPilotUsername: !Ref CoPilotUsername
      CoPilotEmail: !Ref CoPilotEmail
      CoPilotHaEnabled: !Ref CoPilotHaEnabled
      CoPilotPassword: !Ref CoPilotPassword
      CoPilotPasswordSsmPath: !Ref CoPilotPasswordSsmPath
      CoPilotControllerAuthIpType: !Ref CoPilotControllerAuthIpType
      CoPilotUseExistingEip: !Ref CoPilotUseExistingEip
      CoPilotExistingIp: !Ref CoPilotExistingIp
      CoPilotExistingDrIp: !Ref CoPilotExistingDrIp
  AviatrixPlatformInitTriggerPoint:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Aviatrix Platform HA - Trigger the Codebuild project with the user parameters from CFN
      FunctionName: !Sub '${AWS::StackName}-${AWS::Region}-AvxPlatformHA'
      Role: !GetAtt Adminrole.Arn
      Timeout: 900
      Handler: index.lambda_handler
      Runtime: python3.7
      Environment:
        Variables:
          codebuild_name: !Ref AviatrixCodeBuild
      Code:
        ZipFile: !Sub |
          import boto3
          import cfnresponse
          import json
          import requests
          import traceback
          import os
          import urllib3
          import warnings
          warnings.filterwarnings("ignore", category=DeprecationWarning)
          urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

          def lambda_handler(event, context):
              try:
                  print(f"event: {event}")
                  print(f"context: {context}")
                  if event.get('RequestType') == 'Delete':
                      cb_env_vars = [{'name': 'destroy', 'value': 'true'}]
                  else:
                      cb_env_vars = [{'name': 'destroy', 'value': 'false'}]
                  cft_event_vars = [
                    {'name': 'EVENT_REQUEST_TYPE', 'value': event['RequestType']},
                    {'name': 'EVENT_REQUEST_ID', 'value': event['RequestId']},
                    {'name': 'EVENT_STACK_ID', 'value': event['StackId']},
                    {'name': 'EVENT_LOGICAL_RESOURCE_ID', 'value': event['LogicalResourceId']},
                    {'name': 'EVENT_RESPONSE_URL', 'value': event['ResponseURL']},
                    {'name': 'CONTEXT_LOG_STREAM_NAME', 'value': context.log_stream_name},
                    {'name': 'EVENT_PHYSICAL_RESOURCE_ID', 'value': event.get('PhysicalResourceId', 'PhysicalResource1234')},
                  ]
                  cb_env_vars.extend(cft_event_vars)
                  env_var_exclude = ['ServiceToken', 'OldResourceProperties']
                  for name in event['ResourceProperties']:
                      if name not in env_var_exclude:
                          cb_env_vars.append({'name': name, 'value': event['ResourceProperties'][name]})
                  print(f"cb_env_vars: {cb_env_vars}")
                  codebuild_name = os.environ['codebuild_name']
                  client = boto3.client('codebuild')
                  client.start_build(projectName=codebuild_name, environmentVariablesOverride=cb_env_vars)
                  print(f"started lambda with codebuild_name: {codebuild_name}")
              except Exception as err:
                  errmsg = f"Aviatrix platform init trigger failed: {traceback.format_exc()}"
                  print(errmsg)
  AviatrixCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${AWS::StackName}-${AWS::Region}-AvxPlatformHA'
      Description: Aviatrix Platform HA - Run the Terraform code based on user parameters from the CFN
      ServiceRole: !Ref Adminrole
      Artifacts:
        Type: NO_ARTIFACTS
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub |
          version: 0.2
          env:
            shell: bash
          phases:
            install:
              commands:
                - echo "getting OS updates and installing packages"
                - apt-get update
                - apt-get install -y curl jq
                - echo "downloading terraform"
                - wget -nv https://releases.hashicorp.com/terraform/1.4.0/terraform_1.4.0_linux_amd64.zip
                - unzip terraform_1.4.0_linux_amd64.zip
                - sudo mv terraform /usr/local/bin/
                - rm terraform_1.4.0_linux_amd64.zip
                - curl 169.254.170.2$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI | jq 'to_entries | [ .[] | select(.key | (contains("Expiration") or contains("RoleArn"))  | not) ] |  map(if .key == "AccessKeyId" then . + {"key":"AWS_ACCESS_KEY_ID"} else . end) | map(if .key == "SecretAccessKey" then . + {"key":"AWS_SECRET_ACCESS_KEY"} else . end) | map(if .key == "Token" then . + {"key":"AWS_SESSION_TOKEN"} else . end) | map("export \(.key)=\(.value)") | .[]' -r > /tmp/aws_cred_export.txt # work around https://github.com/hashicorp/terraform/issues/8746
                - echo "Prepare tfexec.py"
                - |
                  cat >> tfexec.py << EOF
                  import sys
                  import subprocess
                  import boto3
                  import requests
                  import json

                  def get_terraform_output():
                      command = "terraform output -json"
                      try:
                          output = subprocess.check_output(command, shell=True)
                          output = output.decode('utf-8')  # Decode the byte string to UTF-8
                          output_json = json.loads(output) # Parse the output as JSON
                          return output_json
                      except subprocess.CalledProcessError as e:
                          print(f"Failed to run 'terraform output'. Error: {e}")

                  def save_ssm_parameter(parameter_name, parameter_value, parameter_type='String', description=''):
                      try:
                          ssm_client = boto3.client('ssm')
                          response = ssm_client.put_parameter(
                              Name=parameter_name,
                              Value=parameter_value,
                              Type=parameter_type,
                              Description=description,
                              Overwrite=True
                          )
                          if response['ResponseMetadata']['HTTPStatusCode'] == 200:
                              print(f"SSM parameter '{parameter_name}' saved successfully.")
                          else:
                              print(f"Failed to save SSM parameter '{parameter_name}'.")
                      except Exception as err:
                          print(f"Error saving output name '{parameter_name}' with value '{parameter_value}'")
                          print(str(err))

                  def save_tf_outputs():
                      tf_output = get_terraform_output()
                      for op_key in tf_output.keys():
                          if tf_output[op_key]['value'] == '':
                              print(f"skipping output {op_key} with empty value: {tf_output[op_key]['value']}")
                          else:
                              print(f"saving output {op_key} with value {tf_output[op_key]['value']}")
                              save_ssm_parameter(f"/aviatrix/platform_ha/{op_key}", tf_output[op_key]['value'])

                  def main():
                      try:
                          destroy = sys.argv[1]
                          action = "apply"
                          if destroy.lower() == "true":
                              action = "destroy"
                          cmd = ["terraform", action, "-auto-approve"]
                          return_code = subprocess.call(cmd)
                          if return_code != 0:
                              sys.exit(return_code)
                          if action == 'apply':
                              save_tf_outputs()
                          else:
                              print(f"Deleting Terraform State Files")
                              s3 = boto3.resource("s3")
                              bucket = s3.Bucket("${S3StateAndSoftware}")
                              bucket.objects.all().delete()
                      except Exception as err:
                          print(f"Error {str(err)}")
                          raise err

                  main()
                  EOF
                - cat tfexec.py
                - echo "Prepare main.tf"
                - |
                  cat >> main.tf << EOF
                  terraform {
                    required_providers {
                      aws = {
                        source = "hashicorp/aws"
                      }
                    }
                    backend "s3" {
                      bucket = "${S3StateAndSoftware}"
                      key    = "${AWS::StackName}/terraform.tfstate"
                      region = "${AWS::Region}"
                    }
                  }
                  module "aws_controller_ha" {
                    source = "$GithubSource"
                    region = "$Region"
                    dr_region = "$DrRegion"
                    s3_backup_region = "$S3BackupRegion"
                    ha_distribution = "$HaDistribution"
                    name_prefix = "$NamePrefix"
                    vpc_name = "$VpcName"
                    dr_vpc_name = "$DrVpcName"
                    subnet_name = "$SubnetName"
                    vpc_cidr = "$VpcCidr"
                    dr_vpc_cidr = "$DrVpcCidr"
                    use_existing_vpc = "$UseExistingVpc"
                    vpc = "$ExistingVpcID"
                    dr_vpc = "$ExistingDrVpcID"
                    subnet_ids = ["$ExistingSubnetIDs"]
                    dr_subnet_ids = ["$ExistingDrSubnetIDs"]
                    create_iam_roles = "$CreateIamRoles"
                    app_role_name = "$AppRoleName"
                    ec2_role_name = "$Ec2RoleName"
                    keypair = "$Keypair"
                    dr_keypair = "$DrKeypair"
                    controller_name = "$ControllerInstanceName"
                    instance_type = "$ControllerInstanceType"
                    root_volume_type = "$ControllerRootVolumeType"
                    root_volume_size = "$ControllerRootVolumeSize"
                    incoming_ssl_cidr = ["$ControllerIncomingSslCidr"]
                    controller_ha_enabled = "$ControllerHaEnabled"
                    termination_protection = "$TerminationProtection"
                    license_type = "$LicenseType"
                    asg_notif_email = "$AsgNotificationEmail"
                    s3_backup_bucket = "$S3BackupBucketName"
                    admin_email = "$AdminEmail"
                    access_account_name = "$AccessAccountName"
                    controller_version = "$ControllerVersion"
                    avx_customer_id = "$CustomerId"
                    avx_customer_id_ssm_path = "$CustomerIdSsmPath"
                    avx_customer_id_ssm_region = "$CustomerIdSsmRegion"
                    avx_password = "$AdminPassword"
                    avx_password_ssm_path = "$AdminPasswordSsmPath"
                    avx_password_ssm_region = "$AdminPasswordSsmRegion"
                    use_existing_eip = "$UseExistingEip"
                    existing_eip = "$ExistingIp"
                    existing_dr_eip = "$ExistingDrIp"
                    zone_name = "$ZoneName"
                    private_zone = "$PrivateZone"
                    record_name = "$RecordName"
                    inter_region_backup_enabled = "$InterRegionBackupEnabled"
                    copilot_name = "$CoPilotName"
                    copilot_deployment = "$CoPilotDeployment"
                    copilot_data_node_count = "$CoPilotDataNodeCount"
                    copilot_instance_type = "$CoPilotInstanceTypeParam"
                    copilot_root_volume_type = "$CoPilotRootVolumeType"
                    copilot_root_volume_size = "$CoPilotRootVolumeSize"
                    copilot_default_data_volume_type = "$CoPilotDefaultDataVolumeType"
                    copilot_default_data_volume_size = "$CoPilotDefaultDataVolumeSize"
                    copilot_incoming_https_cidr = ["$CoPilotIncomingHttpsCidr"]
                    copilot_incoming_netflow_cidr = ["$CoPilotIncomingNetflowCidr"]
                    copilot_incoming_syslog_cidr = ["$CoPilotIncomingSyslogCidr"]
                    copilot_type = "$CoPilotType"
                    copilot_username = "$CoPilotUsername"
                    copilot_email = "$CoPilotEmail"
                    copilot_ha_enabled = "$CoPilotHaEnabled"
                    avx_copilot_password = "$CoPilotPassword"
                    avx_copilot_password_ssm_path = "$CoPilotPasswordSsmPath"
                    cop_controller_auth_ip = "$CoPilotControllerAuthIpType"
                    use_existing_copilot_eip = "$CoPilotUseExistingEip"
                    existing_copilot_eip = "$CoPilotExistingIp"
                    existing_copilot_dr_eip = "$CoPilotExistingDrIp"
                  }
                  output "ha_distribution" {
                    value = module.aws_controller_ha.ha_distribution
                  }

                  output "zone_name" {
                    value = module.aws_controller_ha.zone_name
                  }

                  output "record_name" {
                    value = module.aws_controller_ha.record_name
                  }

                  output "s3_backup_region" {
                    value = module.aws_controller_ha.s3_backup_region
                  }

                  output "s3_backup_bucket" {
                    value = module.aws_controller_ha.s3_backup_bucket
                  }

                  output "log_group_name" {
                    value = module.aws_controller_ha.log_group_name
                  }

                  output "controller_name" {
                    value = module.aws_controller_ha.controller_name
                  }

                  output "copilot_name" {
                    value = module.aws_controller_ha.copilot_name
                  }

                  output "region" {
                    value = module.aws_controller_ha.region
                  }

                  output "dr_region" {
                    value = module.aws_controller_ha.dr_region
                  }

                  output "controller_public_ip" {
                    value = module.aws_controller_ha.controller_public_ip
                  }

                  output "dr_controller_public_ip" {
                    value = module.aws_controller_ha.dr_controller_public_ip
                  }

                  output "copilot_public_ip" {
                    value = module.aws_controller_ha.copilot_public_ip
                  }

                  output "dr_copilot_public_ip" {
                    value = module.aws_controller_ha.dr_copilot_public_ip
                  }

                  output "lb_dns_name" {
                    value = module.aws_controller_ha.lb_dns_name
                  }

                  output "dr_lb_dns_name" {
                    value = module.aws_controller_ha.dr_lb_dns_name
                  }
                  EOF
                - cat main.tf
                - . /tmp/aws_cred_export.txt && terraform init
            build:
              commands:
                - . /tmp/aws_cred_export.txt && python3 tfexec.py $destroy
            post_build:
              commands:
                - >-
                  if [ "$CODEBUILD_BUILD_SUCCEEDING" == "1" ]; then export
                  STATUS="SUCCESS"; fi
                - >-
                  if [ "$CODEBUILD_BUILD_SUCCEEDING" != "1" ]; then export
                  STATUS="FAILED"; fi
                - >-
                  export JSON_DATA="{\"Status\" : \"$STATUS\", \"Reason\" : \"See the details in CloudWatch Log Stream: $CONTEXT_LOG_STREAM_NAME\", \"StackId\" : \"$EVENT_STACK_ID\", \"PhysicalResourceId\" : \"$EVENT_PHYSICAL_RESOURCE_ID\", \"RequestId\" : \"$EVENT_REQUEST_ID\", \"LogicalResourceId\" : \"$EVENT_LOGICAL_RESOURCE_ID\" }"
                - >-
                  echo "$JSON_DATA"
                - curl -X PUT --data-binary "$JSON_DATA" "$EVENT_RESPONSE_URL"
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/standard:6.0
        PrivilegedMode: true
Outputs:
  HADistribution:
    Description: HA Distribution Details
    Value:
      Fn::GetAtt:
        - HADistributionSSM
        - Value
  ZoneName:
    Description: Route53 Zone Name
    Value:
      Fn::GetAtt:
        - ZoneNameSSM
        - Value
  RecordName:
    Description: Route53 Record Name
    Value:
      Fn::GetAtt:
        - RecordNameSSM
        - Value
  S3BackupRegion:
    Description: S3 Backup Region Name
    Value:
      Fn::GetAtt:
        - S3BackupRegionSSM
        - Value
  S3BackupBucket:
    Description: S3 Backup Bucket Name
    Value:
      Fn::GetAtt:
        - S3BackupBucketSSM
        - Value
  LogGroup:
    Description: Cloudwatch Log Group Name
    Value:
      Fn::GetAtt:
        - LogGroupSSM
        - Value
  ControllerName:
    Description: Controller Name
    Value:
      Fn::GetAtt:
        - ControllerNameSSM
        - Value
  CopilotName:
    Description: CoPilot Name
    Value:
      Fn::GetAtt:
        - CopilotNameSSM
        - Value
  Region:
    Description: Primary Region
    Value:
      Fn::GetAtt:
        - RegionSSM
        - Value
  DrRegion:
    Description: DR Region
    Value:
      Fn::GetAtt:
        - DrRegionSSM
        - Value
  ControllerPublicIp:
    Description: Controller Public IP
    Value:
      Fn::GetAtt:
        - ControllerPublicIpSSM
        - Value
  DrControllerPublicIp:
    Description: DR Controller Public IP
    Value:
      Fn::GetAtt:
        - DrControllerPublicIpSSM
        - Value
  CopilotPublicIp:
    Description: CoPilot Public IP
    Value:
      Fn::GetAtt:
        - CopilotPublicIpSSM
        - Value
  DrCopilotPublicIp:
    Description: DR CoPilot Public IP
    Value:
      Fn::GetAtt:
        - DrCopilotPublicIpSSM
        - Value
  LbDnsName:
    Description: LoadBalancer DNS name
    Value:
      Fn::GetAtt:
        - LbDnsNameSSM
        - Value
  DrLbDnsName:
    Description: DR LoadBalancer DNS name
    Value:
      Fn::GetAtt:
        - DrLbDnsNameSSM
        - Value
  WARNING:
    Value: Aviatrix Platform is deployed successfully. Please wait for about 20 mins for platform initialization. You can go to AWS CodeBuild to trace the progress.
