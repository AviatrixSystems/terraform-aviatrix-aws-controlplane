version: 0.2

phases:
  install:
    commands:
      - echo "getting OS updates and installing packages"
      - apt-get update
      - apt-get install -y curl jq
      - echo "downloading terraform"
      - wget -nv https://releases.hashicorp.com/terraform/${tf_version}/terraform_${tf_version}_linux_amd64.zip
      - unzip terraform_${tf_version}_linux_amd64.zip
      - sudo mv terraform /usr/local/bin/
      - rm terraform_${tf_version}_linux_amd64.zip
      - curl 169.254.170.2$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI | jq 'to_entries | [ .[] | select(.key | (contains("Expiration") or contains("RoleArn"))  | not) ] |  map(if .key == "AccessKeyId" then . + {"key":"AWS_ACCESS_KEY_ID"} else . end) | map(if .key == "SecretAccessKey" then . + {"key":"AWS_SECRET_ACCESS_KEY"} else . end) | map(if .key == "Token" then . + {"key":"AWS_SESSION_TOKEN"} else . end) | map("export \(.key)=\(.value)") | .[]' -r > /tmp/aws_cred_export.txt # work around https://github.com/hashicorp/terraform/issues/8746
      - echo "printing cfn_url - ${cfn_url}"
      - echo "Prepare provider-output-backend.tf"
      - |
        cat >> provider-output-backend.tf << EOF
        terraform {
          backend "s3" { 
            bucket = "$stack_name.$aws_account_id.terraform-state-software"
            key    = "$stack_name/terraform.tfstate"
            region = "$region"
          }
        }
        EOF
      - cat provider-output-backend.tf
      - echo "Prepare terraform.tfvars"
      - |
        cat >> terraform.tfvars << EOF
        region = "$region"
        dr_region = "$dr_region"
        s3_backup_region = "$s3_backup_region"
        ha_distribution = "$ha_distribution"
        name_prefix = "$name_prefix"
        vpc_name = "$vpc_name"
        dr_vpc_name = "$dr_vpc_name"
        subnet_name = "$subnet_name"
        vpc_cidr = "$vpc_cidr"
        dr_vpc_cidr = "$dr_vpc_cidr"
        use_existing_vpc = "$use_existing_vpc"
        vpc = "$vpc"
        dr_vpc = "$dr_vpc"
        subnet_ids = ["$subnet_ids"]
        dr_subnet_ids = ["$dr_subnet_ids"]
        create_iam_roles = "$create_iam_roles"
        app_role_name = "$app_role_name"
        ec2_role_name = "$ec2_role_name"
        keypair = "$keypair"
        dr_keypair = "$dr_keypair"
        instance_type = "$instance_type"
        root_volume_type = "$root_volume_type"
        root_volume_size = "$root_volume_size"
        incoming_ssl_cidr = ["$incoming_ssl_cidr"]
        termination_protection = "$termination_protection"
        license_type = "$license_type"
        asg_notif_email = "$asg_notif_email"
        s3_backup_bucket = "$s3_backup_bucket"
        admin_email = "$admin_email"
        access_account_name = "$access_account_name"
        controller_version = "$controller_version"
        avx_customer_id = "$avx_customer_id"
        avx_customer_id_ssm_path = "$avx_customer_id_ssm_path"
        avx_customer_id_ssm_region = "$avx_customer_id_ssm_region"
        avx_password = "$avx_password"
        avx_password_ssm_path = "$avx_password_ssm_path"
        avx_password_ssm_region = "$avx_password_ssm_region"
        use_existing_eip = "$use_existing_eip"
        existing_eip = "$existing_eip"
        existing_dr_eip = "$existing_dr_eip"
        zone_name = "$zone_name"
        private_zone = "$private_zone"
        record_name = "$record_name"
        inter_region_backup_enabled = "$inter_region_backup_enabled"
        copilot_name = "$copilot_name"
        copilot_deployment = "$copilot_deployment"
        copilot_data_node_count = "$copilot_data_node_count"
        cop_instance_type = "$cop_instance_type"
        cop_root_volume_type = "$cop_root_volume_type"
        cop_root_volume_size = "$cop_root_volume_size"
        cop_default_data_volume_type = "$cop_default_data_volume_type"
        cop_default_data_volume_size = "$cop_default_data_volume_size"
        cop_incoming_https_cidr = ["$cop_incoming_https_cidr"]
        cop_incoming_netflow_cidr = ["$cop_incoming_netflow_cidr"]
        cop_incoming_syslog_cidr = ["$cop_incoming_syslog_cidr"]
        cop_type = "$cop_type"
        copilot_username = "$copilot_username"
        copilot_email = "$copilot_email"
        avx_copilot_password = "$avx_copilot_password"
        avx_copilot_password_ssm_path = "$avx_copilot_password_ssm_path"
        cop_controller_auth_ip = "$cop_controller_auth_ip"
        use_existing_copilot_eip = "$use_existing_copilot_eip"
        existing_copilot_eip = "$existing_copilot_eip"
        existing_copilot_dr_eip = "$existing_copilot_dr_eip"
        EOF
      - pwd
      - ls ./
      - cat terraform.tfvars
      - . /tmp/aws_cred_export.txt && terraform init
  build:
    commands:
      - . /tmp/aws_cred_export.txt && python3 tfexec.py $destroy ${cfn_url}
  post_build:
    commands:
      - echo "Nothing to do in the post_build for now"
